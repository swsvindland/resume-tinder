import { NextPage } from 'next';
import Head from 'next/head';
import { useDropzone } from 'react-dropzone';
import { useCallback, useState } from 'react';
import { useSession } from 'next-auth/react';
import { NotAuthorized } from '../components/NotAuthorized';
import { api } from '../utils/api';
import { v4 } from 'uuid';
import { useQueryClient } from '@tanstack/react-query';
import Accept from 'react-dropzone/typings/tests/accept';

const Upload: NextPage = () => {
    const { data: sessionData } = useSession();

    if (!sessionData) {
        return <NotAuthorized />;
    }

    return (
        <>
            <Head>
                <title>Upload Resumes</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
                <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
                    <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
                        Upload Resumes
                    </h1>
                    <Dropzone />
                </div>
            </main>
        </>
    );
};

export default Upload;

function Dropzone() {
    const { data: session, status } = useSession();
    const [files, setFiles] = useState<File[]>([]);
    const queryClient = useQueryClient();
    const { data, isLoading } = api.file.getAll.useQuery();
    const uploadMutation = api.file.upload.useMutation({
        onSuccess: async () => {
            await queryClient.invalidateQueries(api.file.getQueryKey());
        },
    });

    const onDrop = useCallback(
        (acceptedFiles: File[]) => {
            // Do something with the files
            setFiles(acceptedFiles);
            acceptedFiles.forEach((file) => {
                uploadMutation.mutate({
                    id: v4(),
                    userId: session!.user.id,
                    type: 'pdf',
                    url: '',
                    name: file.name,
                    size: file.size,
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                });
            });
        },
        [session, uploadMutation]
    );

    const { getRootProps, getInputProps, isDragActive } = useDropzone({
        onDrop,
        accept: {
            'application/pdf': ['.pdf'],
        },
    });

    return (
        <div className="grid grid-cols-1">
            <div
                {...getRootProps()}
                className="rounded-lg border border-white p-2"
            >
                <input {...getInputProps()} />
                {isDragActive ? (
                    <p className="text-lg text-white">
                        Drop the files here ...
                    </p>
                ) : (
                    <p className="text-lg text-white">
                        Drag and drop some files here, or click to select files
                    </p>
                )}
            </div>
            <ul>
                {data?.map((file) => (
                    <li key={file.name} className="text-md text-white">
                        {file.name}
                    </li>
                ))}
            </ul>
        </div>
    );
}
